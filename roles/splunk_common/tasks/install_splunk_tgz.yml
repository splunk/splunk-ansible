- name: Download Splunk with the bearer token authentication
  get_url:
    url: "{{ splunk.build_location }}"
    dest: "{{ splunk.opt }}"
    headers:
      Authorization: "Bearer {{ splunk.build_url_bearer_token }}"
  when: splunk.build_url_bearer_token is defined
  register: download_result
  become: yes
  become_user: "{{ privileged_user }}"

- name: Define a path for the downloaded package
  set_fact:
    downloaded_splunk_path: "{{ download_result.dest }}"
  when: download_result is defined and download_result.dest is defined

- name: Install Splunk from downloaded local build
  unarchive:
    src: "{{ downloaded_splunk_path }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
  when: downloaded_splunk_path is defined
  register: install_result
  until: install_result is succeeded
  retries: "{{ retry_num }}"
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"

- name: Install Splunk (Linux) from network
  unarchive:
    src: "{{ splunk.build_location }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
    remote_src: "{{ splunk.build_remote_src }}"
  environment:
    http_proxy: "{{ lookup('env','http_proxy') | default('') }}"
    https_proxy: "{{ lookup('env','https_proxy') | default('') }}"
  when: splunk.build_remote_src and downloaded_splunk_path is not defined
  register: install_result
  until: install_result is succeeded
  retries: "{{ retry_num }}"
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"

- name: Install Splunk (Linux) from local build
  unarchive:
    src: "{{ splunk.build_location|regex_replace('^file://(.*)$', '\\1') }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
    remote_src: "{{ splunk.build_remote_src }}"
  when: not splunk.build_remote_src and downloaded_splunk_path is not defined
  register: install_result
  until: install_result is succeeded
  retries: "{{ retry_num }}"
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"
