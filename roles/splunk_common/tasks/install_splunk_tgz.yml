- name: Download Splunk with an optional bearer token
  get_url:
    url: "{{ splunk.build_location }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
    headers: '{% if splunk.build_url_bearer_token %}{"Authorization": "Bearer {{ splunk.build_url_bearer_token }}"}{% else %}{}{% endif %}'
    validate_certs: no
    timeout: 900
    mode: 0666
  when: 
    - splunk.build_location is match("^(https?)://.*")
    - splunk.artifact_auth_user is undefined or splunk.artifact_auth_user == ""
  register: download_result
  until: download_result is succeeded
  retries: 5
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"

- name: Download Splunk using basic auth
  get_url:
    url: "{{ splunk.build_location }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
    force_basic_auth: false 
    url_username: "{{ splunk.artifact_auth_user }}"
    url_password: "{{ splunk.artifact_auth_pass }}"
    validate_certs: no
    timeout: 900
    mode: 0666
  when: 
    - splunk.build_location is match("^(https?)://.*")
    - splunk.artifact_auth_user is defined
    - splunk.artifact_auth_user != ""
  register: download_result
  until: download_result is succeeded
  retries: 5
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"

- name: Define a path for the downloaded package
  set_fact:
    splunk_downloaded_build_location: "{{ download_result.dest }}"
  when: splunk.build_location is match("^(https?)://.*")

- name: Define a regex replacement for splunk.build_location
  set_fact:
    splunk_replaced_build_location: "{{ splunk.build_location | regex_replace('^file://(.*)$', '\\1') }}"

- name: Install Splunk (Linux) from local build location
  shell: tar --no-same-owner --no-same-permissions -x --owner={{ splunk.user }} --group={{ splunk.group }}  -f {% if splunk.build_location is match('^(https?)://.*') %}{{ splunk_downloaded_build_location }}{% else %}{{ splunk_replaced_build_location }}{% endif %} -C {{ splunk.opt }} && chown -R {{ splunk.user }}:{{ splunk.group }} /opt/splunk/*
  register: install_result
  until: install_result is succeeded
  retries: "{{ retry_num }}"
  delay: "{{ retry_delay }}"
  become: yes
  become_user: "{{ privileged_user }}"
