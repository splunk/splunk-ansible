---
- name: "Enable forwarding to {{ forward_servers }}"
  command: "{{ splunk.exec }} add forward-server {{ item }}:{{ splunk.s2s.port if splunk.s2s.port is defined else splunk.s2s_port }} -auth {{ splunk.admin_user }}:{{ splunk.password }}"
  become: yes
  become_user: "{{ splunk.user }}"
  with_items: "{{ forward_servers }}"
  register: forward_status
  when: '("s2s" not in splunk and "s2s_port" in splunk) or ("s2s" in splunk and ("ssl" not in splunk.s2s or ("ssl" in splunk.s2s and not splunk.s2s.ssl))) | bool'
  changed_when:
    - "'Added forwarding to: ' in forward_status.stdout"
    - "'forwarded-server already present' not in forward_status.stderr"
  failed_when:
    - forward_status.rc != 0
    - "'forwarded-server already present' not in forward_status.stderr"
  no_log: "{{ hide_password }}"

- name: "Enable ssl-forwarding to {{ forward_servers }}"
  become: yes
  become_user: "{{ splunk.user }}"
  ini_file:
    path: "{{ splunk.home }}/etc/system/local/outputs.conf"
    section: "tcpout:group1"
    option: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
    - {key: "server", value: "{% for fwd in forward_servers %}{{ fwd }}:{{ splunk.s2s.port }}{{ ',' if not loop.last else '' }}{% endfor %}"}
    - {key: "clientCert", value: "{{ splunk.s2s.cert if splunk.s2s is defined and splunk.s2s.cert is defined else ''}}"}
    - {key: "sslPassword", value: "{{ splunk.s2s.password if splunk.s2s is defined and splunk.s2s.password is defined else ''}}"}
    - {key: "useClientSSLCompression", value: "{{ 'true' if splunk.s2s is defined and splunk.s2s.ssl is defined and splunk.s2s.ssl else '' }}"}
  when:
    - '"s2s" in splunk and "ssl" in splunk.s2s and splunk.s2s.ssl | bool'
    - item.value | length > 0
  no_log: "{{ hide_password }}"
  register: enable_ssl_forwarding

- name: "Get Splunk status"
  command: "{{ splunk.exec }} status --accept-license --answer-yes --no-prompt"
  become: yes
  become_user: "{{ splunk.user }}"
  register: splunk_status
  changed_when: False
  failed_when: False
  ignore_errors: yes

# We want to restart only when Splunk is currently running and when any of the above have changed
- name: Trigger restart
  command: ls
  changed_when: splunk_status.rc == 0 and (forward_status is changed or enable_ssl_forwarding is changed)
  notify:
    - Restart the splunkd service
