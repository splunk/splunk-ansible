---
# TODO: Remove all secondary conditionals on deprecation of splunk.hec_* variables

- name: Setup global HEC
  uri:
    url: "{{ cert_prefix }}://127.0.0.1:{{ splunk.svc_port }}/services/data/inputs/http/http"
    method: POST
    user: "{{ splunk.admin_user }}"
    password: "{{ splunk.password }}"
    validate_certs: false
    body:
      disabled: "{% if ('hec' in splunk and 'enable' in splunk.hec and splunk.hec.enable | bool) or ('hec_disabled' in splunk and not splunk.hec_disabled | bool) %}0{% else %}1{% endif %}"
      enableSSL: "{% if ('hec' in splunk and 'ssl' in splunk.hec and splunk.hec.ssl | bool) or ('hec_enableSSL' in splunk and splunk.hec_enableSSL | bool) %}1{% else %}0{% endif %}"
      port: "{% if 'hec' in splunk and 'port' in splunk.hec and splunk.hec.port %}{{ splunk.hec.port }}{% elif 'hec_port' in splunk and splunk.hec_port %}{{ splunk.hec_port }}{% else %}8088{% endif %}"
      serverCert: "{% if 'hec' in splunk and 'cert' in splunk.hec and splunk.hec.cert %}{{ splunk.hec.cert }}{% endif %}"
      sslPassword: "{% if 'hec' in splunk and 'password' in splunk.hec and splunk.hec.password %}{{ splunk.hec.password }}{% endif %}"
    body_format: "form-urlencoded"
    status_code: 200
    timeout: 60
    use_proxy: no
  no_log: "{{ hide_password }}"

- name: Get existing HEC token
  uri:
    url: "{{ cert_prefix }}://127.0.0.1:{{ splunk.svc_port }}/services/data/inputs/http/splunk_hec_token?output_mode=json"
    method: GET
    user: "{{ splunk.admin_user }}"
    password: "{{ splunk.password }}"
    validate_certs: false
    status_code: 200,404
    timeout: 60
    use_proxy: no
  register: hec_token
  when: ('hec' in splunk and 'token' in splunk.hec) or ('hec_token' in splunk)
  no_log: "{{ hide_password }}"

# The REST API does not support modifying tokens in-place, so we'll need to delete/re-create
- name: Remove existing HEC token
  uri:
    url: "{{ cert_prefix }}://127.0.0.1:{{ splunk.svc_port }}/services/data/inputs/http/splunk_hec_token"
    method: DELETE
    user: "{{ splunk.admin_user }}"
    password: "{{ splunk.password }}"
    validate_certs: false
    status_code: 200,404
    timeout: 60
    use_proxy: no
  register: delete_hec_token
  changed_when: delete_hec_token.status == 200
  when:
    - hec_token is defined and hec_token.status == 200
    - ('hec' in splunk and 'token' in splunk.hec and hec_token.json['entry'][0]['content']['token'] != splunk.hec.token) or ('hec_token' in splunk and hec_token.json['entry'][0]['content']['token'] != splunk.hec_token)
  no_log: "{{ hide_password }}"

- name: Update HEC token configuration
  uri:
    url: "{{ cert_prefix }}://127.0.0.1:{{ splunk.svc_port }}/services/data/inputs/http"
    method: POST
    user: "{{ splunk.admin_user }}"
    password: "{{ splunk.password }}"
    validate_certs: false
    body:
      name: "splunk_hec_token"
      token: "{% if 'hec' in splunk and 'token' in splunk.hec and splunk.hec.token %}{{ splunk.hec.token }}{% else %}{{ splunk.hec_token }}{% endif %}"
    body_format: "form-urlencoded"
    status_code: 201,409
    timeout: 60
    use_proxy: no
  register: create_hec_token
  changed_when: create_hec_token.status == 201
  when: ('hec' in splunk and 'token' in splunk.hec and splunk.hec.token) or ('hec_token' in splunk and splunk.hec_token)
  no_log: "{{ hide_password }}"
