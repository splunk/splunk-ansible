---
- name: "Retrieve Splunk version"
  command: "{{ splunk.exec }} version --accept-license --answer-yes --no-prompt"
  register: installed_splunk_version
  become: yes
  become_user: "{{ splunk.user }}"
  when: ansible_system is match("Linux")

- name: "Set installed version fact"
  set_fact:
    installed_splunk_version: "{{ installed_splunk_version.stdout | regex_search(regexp, '\\1') }}"
  vars:
    regexp: 'Splunk(?:\sUniversal\sForwarder)?\s((\d+)\.(\d+)\.(\d+)).*'
  when: ansible_system is match("Linux")

- name: "Enable service via boot-start - Linux (systemd)"
  become: yes
  become_user: "{{ privileged_user }}"
  command: "{{ splunk.exec }} enable boot-start -systemd-managed 1 -user {{ splunk.user }} --accept-license --answer-yes --no-prompt"
  when:
    - ansible_system is match("Linux")
    - splunk_systemd
    - installed_splunk_version[0] is version("7.2.2", ">=")

# Using service file approach for systemd rather than 'boot-start' with
# 'systemd-unit-file-name' option because cli's versions older than 7.2.2 do
# not implement systemd in boot-start command.
- name: "Copy Splunkd unit file - Linux (systemd)"
  template:
    src: Splunkd.service.j2
    dest: "/etc/systemd/system/{{ splunk_service_name }}"
    owner: "{{ privileged_user }}"
    group: "{{ privileged_user }}"
    mode: 0644
  become: yes
  become_user: "{{ privileged_user }}"
  when:
    - ansible_system is match("Linux")
    - splunk_systemd
    - installed_splunk_version[0] is version("7.2.2", "<")

- name: "Disable cgroup systemd settings in Docker"
  replace:
    path: "/etc/systemd/system/{{ splunk_service_name }}"
    regexp: '^ExecStartPost=(.*)$'
    replace: '#ExecStartPost=\1'

- name: "Reload daemons via systemctl - Linux (systemd)"
  become: yes
  become_user: "{{ privileged_user }}"
  systemd:
      daemon-reload: yes
      name: "{{ splunk_service_name }}"
      enabled: true
  when:
    - ansible_system is match("Linux")
    - splunk_systemd

- name: "Enable service via boot-start - Linux (init)"
  become: yes
  become_user: "{{ privileged_user }}"
  command: "{{ splunk.exec }} enable boot-start -user {{ splunk.user }} --accept-license --answer-yes --no-prompt"
  when: ansible_system is match("Linux") and not splunk_systemd

- name: "Enable service via boot-start - Windows"
  command: "{{ splunk.exec }} enable boot-start -user {{ splunk.user }} --accept-license --answer-yes --no-prompt"
  when: ansible_os_family == "Windows"
