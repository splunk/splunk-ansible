---
# Choose privileged username for current OS
- name: "Set privilege escalation user"
  set_fact:
    privileged_user: "{% if ansible_system is match('CYGWIN*|Win32NT') %}Administrator{% else %}root{% endif %}"

# If there is no Splunk executable, we will need to install.
- name: "Check for existing installation"
  stat:
    path: "{{ splunk.exec }}"
  become: yes
  become_user: "{{ splunk.user }}"
  register: pre_existing_splunk_exec

- name: "Set splunk install fact"
  set_fact:
    splunk_install: "{{ not pre_existing_splunk_exec.stat.exists | default(True) }}"

# We know if this is the first time we are executing Splunk by checking if a splunk.secret file exists.
# Since running the software will generate this and we assume nobody will delete the splunk.secret.
- name: "Check for existing splunk secret"
  stat:
    path: "{{ splunk.home }}/etc/auth/splunk.secret"
  become: yes
  become_user: "{{ splunk.user }}"
  register: pre_existing_splunk_secret

- name: "Set first run fact"
  set_fact:
    first_run: "{{ not pre_existing_splunk_secret.stat.exists | default(True) }}"

# Checking that the .dockerenv file exists is enough to know if we are inside a docker container.
- name: "Check if we are in a docker"
  stat:
    path: "/.dockerenv"
  register: docker_env

- name: "Set docker fact"
  set_fact:
    is_docker: "{{ docker_env.stat.exists | default(False) }}"

# Extracting the numbers from the Splunk installer file name allows us to know the version we are targeting.
- name: "Set target version fact"
  set_fact:
    splunk_target_version: "{{ splunk.build_location | regex_search(regexp, '\\1') | default('0') }}"
  vars:
    regexp: 'splunk\D*?-((\d+)\.(\d+)\.(\d+))'
  when: "'build_location' in splunk and splunk.build_location is not none"

# We can apply the same logic to the current version by checking which manifest file is in Splunk
- name: "Find manifests"
  find:
    paths: "{{ splunk.home }}"
    patterns: ".*-manifest$"
    use_regex: yes
  become: yes
  become_user: "{{ splunk.user }}"
  register: manifests

- name: "Set current version fact"
  set_fact:
    splunk_current_version: "{{ manifests.files[0].path | regex_search(regexp, '\\1') if (manifests.matched == 1) else '0' }}"
  vars:
    regexp: 'splunk\D*?-((\d+)\.(\d+)\.(\d+))'

# We are upgrading if it is not a fresh installation and the current version is different from the target version
- name: "Setting upgrade fact"
  set_fact:
    splunk_upgrade: "{{ 'build_location' in splunk and splunk.build_location and not splunk_install and splunk_target_version and splunk_target_version != splunk_current_version | default(False) }}"
