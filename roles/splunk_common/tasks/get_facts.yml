---
# Choose privileged username for current OS
- name: "Set privilege escalation user"
  set_fact:
    privileged_user: "{% if ansible_system is match('CYGWIN*|Win32NT') %}Administrator{% else %}root{% endif %}"

# Check if SCS CLI is available
- name: "Check for scloud"
  stat:
    path: /usr/bin/scloud
  register: scloudcli
  changed_when: False

# Check if systemd is running
- name: "Identify service system (Linux)"
  command: "ps --no-headers -o comm 1"
  register: pid1
  changed_when: False
  when: splunk.enable_service and ansible_system is match("Linux")

- name: "Set systemd boolean"
  set_fact:
    splunk_systemd: "{{ pid1.stdout.find('systemd') != -1 }}"
  when:
    - splunk.enable_service
    - ansible_system is match("Linux")

# If there is no Splunk executable, we will need to install.
- name: "Check for existing installation"
  stat:
    path: "{{ splunk.exec }}"
  become: yes
  become_user: "{{ splunk.user }}"
  register: pre_existing_splunk_exec

- name: "Set splunk install fact"
  set_fact:
    splunk_install: "{{ not pre_existing_splunk_exec.stat.exists | default(True) }}"

# We know if this is the first time we are executing Splunk by checking if a splunk.secret file exists.
# Since running the software will generate this and we assume nobody will delete the splunk.secret.
- name: "Check for existing splunk secret"
  stat:
    path: "{{ splunk.home }}/etc/auth/splunk.secret"
  register: pre_existing_splunk_secret
  become: yes
  become_user: "{{ splunk.user }}"

- name: "Set first run fact"
  set_fact:
    first_run: "{{ not pre_existing_splunk_secret.stat.exists | default(True) }}"

- name: "Set splunk_build_type fact"
  include_tasks: get_facts_build_type.yml

- name: "Set target version fact"
  include_tasks: get_facts_target_version.yml
  when: splunk_target_version is not defined or splunk_target_version == none

# We can apply the same logic to the current version by checking which manifest file is in Splunk
- name: "Find manifests"
  find:
    paths: "{{ splunk.home }}"
    patterns: ".*-manifest$"
    use_regex: yes
  become: yes
  become_user: "{{ splunk.user }}"
  register: manifests

- name: "Set current version fact"
  set_fact:
    splunk_current_version: "{{ manifests.files[0].path | regex_search(regexp, '\\1') if (manifests.matched == 1) else '0' }}"
    splunk_current_build_hash: "{{ manifests.files[0].path | regex_search(regexp, '\\3') if (manifests.matched == 1) else '0' }}"
    splunk_target_build_hash: "{{ splunk.build_location | string | regex_search(regexp, '\\3') | default('0') }}"
  vars:
    regexp: 'splunk\D*?-(\d+\.\d+\.\d+(\.\d+)?)-(.*?)-.*?'

# We are upgrading if it is not a fresh installation and the current version is different from the target version,
# and allowing upgrades between new and old hashes of the same version.
- name: "Setting upgrade fact"
  set_fact:
    splunk_upgrade: "{{ 'build_location' in splunk and splunk.build_location and not splunk_install and splunk_target_version and ((splunk_target_version != splunk_current_version) or (splunk_current_build_hash != splunk_target_build_hash))| default(False) }}"

# determine if we need to set up indexer clusters
- name: "Setting indexer cluster fact from config"
  set_fact:
    splunk_indexer_cluster: "{{ True if 'cluster_master_url' in splunk and splunk.cluster_master_url else False }}"

# determine if we need to set up search head clusters
- name: "Setting search head cluster fact from config"
  set_fact:
    splunk_search_head_cluster: "{{ True if 'search_head_captain_url' in splunk and splunk.search_head_captain_url else False }}"

# determine if we need to set up forward servers
# First, if they are manually specified in the config, use them
- name: "Setting forward servers fact from config"
  set_fact:
    splunk_forward_servers: "{{ splunk.forward_servers }}"
  when:
    - "'forward_servers' in splunk"

# If not in the config, is there an index cluster to use?
# Configure forwarding to indexers directly
# See: https://docs.splunk.com/Documentation/Splunk/latest/Indexer/forwardersdirecttopeers
- name: "Setting forward servers fact from index cluster group"
  set_fact:
    splunk_forward_servers: "{{ groups['splunk_indexer'] | difference([ansible_hostname]) }}"
  when:
    - "splunk_forward_servers is not defined"
    - "'splunk_indexer' in groups"
    # Prevent self-forwarding
    - splunk.role != "splunk_indexer"

# if not specified in config *and*
# no index clusters, then look for standalone
# See: https://docs.splunk.com/Documentation/Splunk/latest/Indexer/forwardersdirecttopeers
- name: "Setting forward servers fact from standalone group"
  set_fact:
    splunk_forward_servers: "{{ groups['splunk_standalone'] | difference([ansible_hostname]) }}"
  when:
    - "splunk_forward_servers is not defined"
    - "'splunk_standalone' in groups"
    # Prevent self-forwarding
    - splunk.role != "splunk_standalone"
    # This part takes a little explaining.  If we have a mixed cluster with no indexers
    # (Only standalone and search heads) we should not automatically forward the data to
    # standalone instances UNLESS they are specified by forward-servers
    - "'splunk_search_head' not in groups"

# Usually we can auto detect what the service name should be, but sometimes
# we want to manually specify it. This is where we detect it was manually set.
- name: "Detect service name"
  include_tasks: get_facts_service_name.yml
